# Kezie Iroha
# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box_check_update = false

  # Master node configuration
  config.vm.define "k8s-master" do |master|
    master.vm.box = "almalinux/9"
    master.vm.hostname = "k8s-master"
    master.vm.network "private_network", ip: "192.168.56.10" # Use static IP
    master.vm.provider "vmware_desktop" do |v|
      v.memory = 4096
      v.cpus = 2
    end

    # Fix DNS before anything else
    master.vm.provision "shell", inline: <<-SHELL
      echo "Setting up DNS..."
      echo "nameserver 8.8.8.8" > /etc/resolv.conf
      echo "nameserver 8.8.4.4" >> /etc/resolv.conf
      echo "search localdomain" >> /etc/resolv.conf
      echo "Testing DNS..."
      ping -c 1 github.com || echo "DNS still not working, but continuing..."
    SHELL

    master.vm.provision "shell", inline: <<-SHELL
      echo "Disabling swap..."
      swapoff -a
      sed -i '/swap/d' /etc/fstab

      echo "Enabling IP forwarding..."
      echo "net.ipv4.ip_forward = 1" > /etc/sysctl.d/99-k8s.conf
      sysctl --system

      echo "Installing dependencies..."
      dnf install -y epel-release yum-utils wget curl
      dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      dnf install -y containerd.io bash-completion jq net-tools

      echo "Configuring containerd..."
      mkdir -p /etc/containerd
      containerd config default > /etc/containerd/config.toml
      sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
      sed -i 's|registry.k8s.io/pause:3.8|registry.k8s.io/pause:3.10|g' /etc/containerd/config.toml
      systemctl restart containerd
      systemctl enable containerd --now

      echo "Configuring crictl..."
      echo "runtime-endpoint: unix:///run/containerd/containerd.sock" > /etc/crictl.yaml
      echo "image-endpoint: unix:///run/containerd/containerd.sock" >> /etc/crictl.yaml

      echo "Loading required kernel modules..."
      cat <<EOF | tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
      modprobe overlay
      modprobe br_netfilter

      echo "Applying sysctl settings for Kubernetes..."
      cat <<EOF | tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF
      sysctl --system

      echo "Adding Kubernetes repository..."
      cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/repodata/repomd.xml.key
EOF

      echo "Installing Kubernetes components..."
      dnf install -y kubelet kubeadm kubectl
      systemctl enable --now kubelet

      echo "Pulling Kubernetes images..."
      kubeadm config images pull

      # Use the static IP for initialization
      MASTER_IP="192.168.56.10"
      echo "Using Master IP: $MASTER_IP for cluster initialization"
      
      echo "Initializing Kubernetes cluster..."
      kubeadm init --apiserver-advertise-address=$MASTER_IP --pod-network-cidr=10.244.0.0/16

      echo "Setting up kubeconfig for root user..."
      mkdir -p /root/.kube
      cp -i /etc/kubernetes/admin.conf /root/.kube/config

      echo "Setting up kubeconfig for vagrant user..."
      mkdir -p /home/vagrant/.kube
      cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
      chown -R vagrant:vagrant /home/vagrant/.kube

      echo "Deploying Flannel CNI..."
      export KUBECONFIG=/etc/kubernetes/admin.conf
      kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml

      # Create join command using the static IP
      echo "Creating join command with IP: $MASTER_IP"
      kubeadm token create --print-join-command > /vagrant/k8s-join-command.tmp
      sed "s/[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+/$MASTER_IP/g" /vagrant/k8s-join-command.tmp > /vagrant/k8s-join-command.sh
      chmod +x /vagrant/k8s-join-command.sh
      
      # Setup hosts files on master
      echo "$MASTER_IP k8s-master" >> /etc/hosts
      echo "192.168.56.11 k8s-worker1" >> /etc/hosts
      echo "192.168.56.12 k8s-worker2" >> /etc/hosts
      
      # Copy admin.conf for worker nodes, ensure it has the right IP
      sed "s/[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+/$MASTER_IP/g" /etc/kubernetes/admin.conf > /vagrant/admin.conf
      chmod 644 /vagrant/admin.conf
    SHELL
    
    # Add bash profile customizations
    master.vm.provision "shell", inline: <<-'SHELL'
      echo "Setting up bash profile customizations..."
      
      # Create bash profile for master node (control plane)
      cat > /root/.bash_profile << 'EOMASTER'
# ====================================================
# Kubernetes CKA Exam Lab Environment - Control Plane
# ====================================================

# Basic Kubernetes aliases
alias k="kubectl"
alias kgp="kubectl get pods"
alias kgn="kubectl get nodes"
alias kgs="kubectl get services"
alias kgd="kubectl get deployments"
alias kdp="kubectl describe pod"
alias kdn="kubectl describe node"

# All namespaces variants
alias kgpa="kubectl get pods --all-namespaces"
alias kgsa="kubectl get services --all-namespaces"
alias kgda="kubectl get deployments --all-namespaces"

# Namespace management
alias kns="kubectl config set-context --current --namespace"
alias kgns="kubectl get namespaces"
alias kgpn="kubectl get pods -n"  # Use like: kgpn kube-system
alias kgdn="kubectl get deployments -n"
alias kgsn="kubectl get services -n"

# Output formatting
alias kgpw="kubectl get pods -o wide"
alias kgnw="kubectl get nodes -o wide"
alias kyaml="kubectl get -o yaml"
alias kjson="kubectl get -o json"

# Resource management
alias kgcm="kubectl get configmaps"
alias kgsec="kubectl get secrets"
alias kgpv="kubectl get pv"
alias kgpvc="kubectl get pvc"

# Creation and application shortcuts
alias kc="kubectl create -f"
alias kaf="kubectl apply -f"
alias keti="kubectl exec -ti"
alias kcns="kubectl create namespace"
alias kd="kubectl delete"

# Events and logs
alias kge="kubectl get events --sort-by=.metadata.creationTimestamp"
alias kgel="kubectl get events --sort-by=.metadata.creationTimestamp | less"
alias ktail="kubectl logs --tail=50 -f"

# ETCD helpers
export ETCDCTL_API=3
alias etcdctl="kubectl -n kube-system exec -it etcd-k8s-master -- etcdctl --endpoints=https://127.0.0.1:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key"

# ETCD backup/restore functions
etcd-backup() {
  TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
  BACKUP_PATH=${1:-"/tmp/etcd-backup-$TIMESTAMP.db"}
  echo "Creating etcd backup at $BACKUP_PATH"
  etcdctl snapshot save $BACKUP_PATH
  [ $? -eq 0 ] && echo "Backup complete" || echo "Backup failed"
}

etcd-status() {
  echo "==== ETCD Health Status ===="
  etcdctl endpoint health
  echo ""
  echo "==== ETCD Endpoints ===="
  etcdctl endpoint status -w table
  echo ""
  echo "==== ETCD Members ===="
  etcdctl member list -w table
}

# Show cluster information
k-status() {
  echo "==== Nodes Status ===="
  kubectl get nodes -o wide
  echo ""
  echo "==== Control Plane Pods ===="
  kubectl get pods -n kube-system | grep -E 'etcd|apiserver|controller|scheduler'
  echo ""
  echo "==== CNI Status ===="
  kubectl get pods -n kube-flannel
}

# Recent events
k-events() {
  kubectl get events --sort-by=.metadata.creationTimestamp $@ | tail -20
}

# Simple fixed prompt
export PS1="[k8s-master] \W$ "

# Search for pods by partial name
kfind() {
  kubectl get pods --all-namespaces | grep "$1"
}

# Bash completion for kubectl
source <(kubectl completion bash)
complete -F __start_kubectl k

# Bash History settings
export HISTSIZE=10000
export HISTFILESIZE=20000
export HISTTIMEFORMAT="%d/%m/%y %T "

# System info on login
echo "-------------------------------------"
echo "Kubernetes Lab Environment - Control Plane"
echo "$(kubectl version --short 2>/dev/null || echo 'Run as root to see kubectl version')"
echo "-------------------------------------"
echo "Useful commands: k-status, etcd-status, etcd-backup, k-events"
echo "Quick help: type 'alias' to see all available shortcuts"
echo "-------------------------------------"

# Make sure kubectl is in the PATH
export PATH=$PATH:/usr/local/bin:/usr/bin
EOMASTER

      # Copy to vagrant user
      cp /root/.bash_profile /home/vagrant/.bash_profile
      chown vagrant:vagrant /home/vagrant/.bash_profile
      
      # Also add to .bashrc to ensure it works with non-login shells
      cp /root/.bash_profile /root/.bashrc
      cp /home/vagrant/.bash_profile /home/vagrant/.bashrc
      
      echo "Bash profiles have been set up on the master node."
    SHELL
  end

  # Worker nodes configuration
  worker_ips = {"k8s-worker1" => "192.168.56.11", "k8s-worker2" => "192.168.56.12"}
  
  worker_ips.each do |worker_name, worker_ip|
    config.vm.define worker_name do |worker|
      worker.vm.box = "almalinux/9"
      worker.vm.hostname = worker_name
      worker.vm.network "private_network", ip: worker_ip # Use static IP
      worker.vm.provider "vmware_desktop" do |v|
        v.memory = 4096
        v.cpus = 2
      end

      # Fix DNS before anything else
      worker.vm.provision "shell", inline: <<-SHELL
        echo "Setting up DNS..."
        echo "nameserver 8.8.8.8" > /etc/resolv.conf
        echo "nameserver 8.8.4.4" >> /etc/resolv.conf
        echo "search localdomain" >> /etc/resolv.conf
        echo "Testing DNS..."
        ping -c 1 github.com || echo "DNS still not working, but continuing..."
      SHELL

      worker.vm.provision "shell", inline: <<-SHELL
        # Don't stop on error
        set +e
        
        timeout=300
        elapsed=0
        while [ ! -f /vagrant/k8s-join-command.sh ]; do
          echo "Waiting for join command file..."
          sleep 10
          elapsed=$((elapsed + 10))
          if [ $elapsed -ge $timeout ]; then
            echo "ERROR: Timeout waiting for join command. Exiting."
            exit 1
          fi
        done
        echo "Join command found, proceeding with setup..."

        echo "Setting up repositories..."
        dnf install -y epel-release yum-utils wget curl
        dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        
        echo "Adding Kubernetes repository..."
        cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/repodata/repomd.xml.key
EOF
        
        echo "Installing containerd..."
        dnf install -y containerd.io
        
        echo "Configuring containerd..."
        mkdir -p /etc/containerd
        containerd config default > /etc/containerd/config.toml
        sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
        sed -i 's|registry.k8s.io/pause:3.8|registry.k8s.io/pause:3.10|g' /etc/containerd/config.toml
        systemctl restart containerd
        systemctl enable --now containerd

        echo "Configuring crictl..."
        echo "runtime-endpoint: unix:///run/containerd/containerd.sock" > /etc/crictl.yaml
        echo "image-endpoint: unix:///run/containerd/containerd.sock" >> /etc/crictl.yaml

        echo "Loading kernel modules..."
        cat <<EOF | tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
        modprobe overlay
        modprobe br_netfilter

        echo "Enabling IP forwarding..."
        echo "net.ipv4.ip_forward = 1" > /etc/sysctl.d/99-k8s.conf
        cat <<EOF | tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF
        sysctl --system

        echo "Disabling swap..."
        swapoff -a
        sed -i '/swap/d' /etc/fstab

        echo "Installing Kubernetes components..."
        dnf install -y kubelet kubeadm kubectl bash-completion jq net-tools
        systemctl enable --now kubelet

        # Setup /etc/hosts with static IPs
        echo "192.168.56.10 k8s-master" >> /etc/hosts
        echo "192.168.56.11 k8s-worker1" >> /etc/hosts
        echo "192.168.56.12 k8s-worker2" >> /etc/hosts
        
        # Test connectivity to master
        echo "Testing connectivity to master node (192.168.56.10)..."
        ping -c 3 192.168.56.10
        ping -c 3 k8s-master
        
        echo "Joining Kubernetes cluster..."
        # Display the join command for debugging
        echo "Join command:"
        cat /vagrant/k8s-join-command.sh
        
        bash /vagrant/k8s-join-command.sh || {
          echo "ERROR: Failed to join the cluster"
          echo "Trying again with debug output..."
          bash /vagrant/k8s-join-command.sh --v=5
          exit 1
        }
      SHELL

      # Separate provisioning step to set up kubeconfig after joining the cluster
      worker.vm.provision "shell", inline: <<-SHELL
        echo "Waiting for admin.conf from master..."
        timeout=300
        elapsed=0
        while [ ! -f /vagrant/admin.conf ]; do
          echo "Waiting for /vagrant/admin.conf..."
          sleep 10
          elapsed=$((elapsed + 10))
          if [ $elapsed -ge $timeout ]; then
            echo "ERROR: Timeout waiting for /vagrant/admin.conf. Exiting."
            exit 1
          fi
        done
        
        echo "Copying admin.conf to both system and user locations..."
        # System location
        mkdir -p /etc/kubernetes
        cp /vagrant/admin.conf /etc/kubernetes/admin.conf
        chmod 644 /etc/kubernetes/admin.conf
        
        # User location (for convenience)
        mkdir -p /home/vagrant/.kube
        cp /vagrant/admin.conf /home/vagrant/.kube/config
        chown -R vagrant:vagrant /home/vagrant/.kube
        echo "export KUBECONFIG=/home/vagrant/.kube/config" >> /home/vagrant/.bashrc
      SHELL
      
      # Add bash profile customizations for worker nodes
      worker.vm.provision "shell", inline: <<-"SHELL"
        echo "Setting up bash profile customizations..."
        
        # Create bash profile for worker node with hostname
        hostname=$(hostname)
        
        cat > /root/.bash_profile << EOF
# ====================================================
# Kubernetes CKA Exam Lab Environment - Worker Node
# ====================================================

# Basic Kubernetes aliases
alias k="kubectl"
alias kgp="kubectl get pods"
alias kgn="kubectl get nodes"
alias kgs="kubectl get services"
alias kgd="kubectl get deployments"
alias kdp="kubectl describe pod"
alias kdn="kubectl describe node"

# All namespaces variants
alias kgpa="kubectl get pods --all-namespaces"
alias kgsa="kubectl get services --all-namespaces"
alias kgda="kubectl get deployments --all-namespaces"

# Namespace management
alias kns="kubectl config set-context --current --namespace"
alias kgns="kubectl get namespaces"
alias kgpn="kubectl get pods -n"  # Use like: kgpn kube-system
alias kgdn="kubectl get deployments -n"
alias kgsn="kubectl get services -n"

# Output formatting
alias kgpw="kubectl get pods -o wide"
alias kgnw="kubectl get nodes -o wide"
alias kyaml="kubectl get -o yaml"
alias kjson="kubectl get -o json"

# Resource management
alias kgcm="kubectl get configmaps"
alias kgsec="kubectl get secrets"
alias kgpv="kubectl get pv"
alias kgpvc="kubectl get pvc"

# Creation and application shortcuts
alias kc="kubectl create -f"
alias kaf="kubectl apply -f"
alias keti="kubectl exec -ti"
alias kcns="kubectl create namespace"
alias kd="kubectl delete"

# Events and logs
alias kge="kubectl get events --sort-by=.metadata.creationTimestamp"
alias kgel="kubectl get events --sort-by=.metadata.creationTimestamp | less"
alias ktail="kubectl logs --tail=50 -f"

# Show cluster information
k-status() {
  echo "==== Nodes Status ===="
  kubectl get nodes -o wide
  echo ""
  echo "==== Control Plane Pods ===="
  kubectl get pods -n kube-system | grep -E 'etcd|apiserver|controller|scheduler'
  echo ""
  echo "==== CNI Status ===="
  kubectl get pods -n kube-flannel
}

# Recent events
k-events() {
  kubectl get events --sort-by=.metadata.creationTimestamp \$@ | tail -20
}

# Simple fixed prompt with hostname
export PS1="[$hostname] \\W\\$ "

# Search for pods by partial name
kfind() {
  kubectl get pods --all-namespaces | grep "\$1"
}

# Bash completion for kubectl
source <(kubectl completion bash)
complete -F __start_kubectl k

# Bash History settings
export HISTSIZE=10000
export HISTFILESIZE=20000
export HISTTIMEFORMAT="%d/%m/%y %T "

# System info on login
echo "-------------------------------------"
echo "Kubernetes Lab Environment - Worker Node"
echo "\$(kubectl version --short 2>/dev/null || echo 'Run as root to see kubectl version')"
echo "-------------------------------------"
echo "Useful commands: k-status, k-events, kfind"
echo "Quick help: type 'alias' to see all available shortcuts"
echo "-------------------------------------"

# Make sure kubectl is in the PATH
export PATH=\$PATH:/usr/local/bin:/usr/bin
EOF

        # Copy to vagrant user
        cp /root/.bash_profile /home/vagrant/.bash_profile
        chown vagrant:vagrant /home/vagrant/.bash_profile
        
        # Also add to .bashrc to ensure it works with non-login shells
        cp /root/.bash_profile /root/.bashrc
        cp /home/vagrant/.bash_profile /home/vagrant/.bashrc
        
        echo "Bash profiles have been set up on worker node $(hostname)."
      SHELL
    end
  end
end